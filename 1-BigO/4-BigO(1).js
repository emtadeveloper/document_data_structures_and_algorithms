/*
=============================================================================================================================================================
=============================================================================================================================================================

Big O(1)  مفهوم اصلی  : 

وابسته نباشد (n) به پیچیدگی زمانی اطلاق می‌شود که زمان اجرای کد ثابت باشد و به اندازه ورودی  Big O(1)

مهم نیست ورودی چقدر کوچک یا بزرگ باشد زمان اجرا همیشه یکسان است

معمولاً این نوع پیچیدگی زمانی در دسترسی مستقیم به داده‌ها یا اجرای عملیات ساده رخ می‌دهد

Big O(1) ویژگی‌های  =========================================================================================================================================
 
1 ) زمان ثابت :

زمان اجرا تغییر نمی‌کند و همیشه یک مقدار مشخص است

2 ) مستقل از ورودی :

اندازه ورودی ( مثلاً تعداد عناصر آرایه یا طول رشته ) بر زمان اجرا تأثیری ندارد

3 ) کارآمدترین نوع پیچیدگی :

سریع‌ترین و بهینه‌ترین پیچیدگی زمانی است Big O(1)

=============================================================================================================================================================

کنیم پیچیدگی زمانی چقدر است ؟ Assign وقتی به یک متغیر مقداری را 

let x = 5; // مقداردهی اولیه
x = 10;    // تغییر مقدار

تحلیل پیچیدگی زمانی

عملیات مقداردهی به یک متغیر زمان ثابت دارد زیرا سیستم بلافاصله حافظه‌ای برای مقدار اختصاص می‌دهد

است O(1) زمان اجرای این عملیات مستقل از مقدار یا تعداد متغیرها است پیچیدگی زمانی

=============================================================================================================================================================
*/

// مثال 1 : دسترسی به یک عنصر خاص در آرایه

// است O(1) یک عملیات با پیچیدگی Index دسترسی به یک عنصر در یک آرایه از طریق

const array1 = [10, 20, 30, 40, 50];
console.log(array1[2]); // خروجی: 30

// دسترسی مستقیم به اندیس آرایه همیشه یک عملیات ثابت است

// زمان اجرا به تعداد عناصر آرایه وابسته نیست

// O(1) پیچیدگی زمانی

// =============================================================================================================================================================

// Object مثال 2 : دسترسی به یک مقدار از یک

// است O(1) نیز Key از طریق Object دسترسی به یک مقدار خاص در یک

const person = {
  name: "Ali",
  age: 30,
  city: "Tehran",
};

console.log(person.name); // خروجی: Ali

// =============================================================================================================================================================

// مثال 3: بررسی زوج یا فرد بودن یک عدد

// این مثال بررسی می‌کند که آیا یک عدد زوج است یا خیر

function isEven(number) {
  return number % 2 === 0;
}

console.log(isEven(10)); // خروجی: true
console.log(isEven(15)); // خروجی: false

// =============================================================================================================================================================

// مثال 4 : افزودن یک مقدار به ابتدای یک آرایه خاص (استاتیک)

// افزودن مقدار به یک آرایه استاتیک زمانی ثابت دارد

let array = [10, 20, 30, 40];
array[0] = 5; // جایگزینی اولین مقدار
console.log(array); // خروجی: [5, 20, 30, 40]

// =============================================================================================================================================================
// =============================================================================================================================================================
