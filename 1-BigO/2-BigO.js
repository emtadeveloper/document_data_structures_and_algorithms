/*
=============================================================================================================================================================
=============================================================================================================================================================

Big O Notation :  ابزاری برای اندازه‌گیری و توصیف کارایی یک الگوریتم از نظر زمان اجرا یا میزان مصرف حافظه در بدترین حالت ممکن است

مشخص می‌کند که با افزایش اندازه ورودی (تعداد داده‌ها یا عناصر ورودی) زمان اجرا یا فضای مورد نیاز الگوریتم چگونه تغییر Big O به‌عبارتی

می‌کند این تحلیل به شما امکان می‌دهد الگوریتم‌ها را در شرایط مختلف ارزیابی و مقایسه کنید

همیشه بدترین حالت ممکن را در نظر می گیریم یعنی تصور می کنیم  Big O فقط شیب نمودار مهم است برای محاسبه در Big O

کاری که می خواهیم انجام دهیم در آخرین تلاش انجام شده

Big O سه هدف اصلی : ========================================================================================================================================

1 ) اندازه‌گیری زمان اجرا: بفهمیم زمان مورد نیاز یک الگوریتم برای انجام وظایف با افزایش داده‌ها چگونه تغییر می‌کند

2 ) اندازه‌گیری مصرف حافظه: مشخص کنیم الگوریتم چقدر فضای حافظه مصرف می‌کند

3 ) پیش‌بینی رفتار الگوریتم در بدترین حالت: تمرکز بر تحلیل شرایطی که الگوریتم با چالش‌ برانگیزترین ورودی‌ها مواجه است

مهم است؟ Big O  چرا  =======================================================================================================================================

1 ) مقایسه الگوریتم‌ها

به شما کمک می‌کند الگوریتم‌ها را بر اساس زمان اجرا یا مصرف حافظه با هم مقایسه کنید مثلاً بین جستجوی خطی و جستجوی دودویی انتخاب کنید Big O 

عملکرد بهتری خواهد داشت O(n log n) در ورودی‌های بزرگ، الگوریتم O(n log n) داشته باشد و دیگری  O(n²) مثال: اگر الگوریتمی پیچیدگی

2 ) انتخاب بهترین راه‌حل

به شما اجازه می‌دهد الگوریتمی بهینه‌تر برای حل مشکلات خاص پیدا کنید مثال : در مرتب‌سازی  Big O استفاده از 

است O(n²) با پیچیدگی Bubble Sort معمولاً بهتر از O(n log n) با پیچیدگی Merge Sort داده‌ها الگوریتم

3 ) پیش‌بینی رفتار الگوریتم‌ها :

می‌توانید رفتار الگوریتم‌ها را در ورودی‌های بزرگ پیش‌بینی کنید و تشخیص دهید که آیا الگوریتم شما برای Big O با تحلیل

باشد با افزایش ورودی زمان اجرا به سرعت افزایش O(2ⁿ) مقیاس بزرگ مناسب است یا خیر مثال: اگر الگوریتم شما

می‌یابد و ممکن است ناکارآمد باشد

مهم هستند؟ Big O چه چیزهایی در  ============================================================================================================================

1 ) اندازه ورودی (n) :

برابر با تعداد عناصر آرایه است n محاسبه می‌شود مثلاً در یک آرایه (n) همواره بر اساس اندازه ورودی داده‌ها Big O

2 ) رشد تابع :

به ما نشان می‌دهد که زمان اجرا یا فضای حافظه چگونه با افزایش ورودی رشد می‌کند Big O

3 ) ساده‌سازی مقادیر کوچک :

فقط سریع‌ترین رشد اهمیت دارد و مقادیر ثابت یا موارد کم‌اهمیت نادیده گرفته می‌شوند

=============================================================================================================================================================

آیا می‌توان مدت زمان اجرا را برای مقایسه دو الگوریتم استفاده کرد؟ چرا؟  ========================================================================================================

مدت زمان اجرا می‌تواند برای مقایسه مفید باشد اما دلایل محدودیت آن

1 ) وابستگی به سخت‌افزار : مدت زمان اجرا به پردازنده حافظه و سایر عوامل سخت‌افزاری بستگی دارد

2 ) وابستگی به داده‌های ورودی : زمان اجرا ممکن است برای ورودی‌های خاص متفاوت باشد

3 ) رفتار الگوریتم را برای ورودی‌های بزرگ نشان می‌دهد، که مدت زمان اجرا قادر به نمایش آن نیست Big O مقیاس‌پذیری

=============================================================================================================================================================
=============================================================================================================================================================
*/