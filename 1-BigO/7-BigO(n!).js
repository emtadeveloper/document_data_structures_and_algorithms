/*
=============================================================================================================================================================
=============================================================================================================================================================

Big O(n!)  مفهوم اصلی فاکتوریل : 

یکی از پیچیدگی‌های زمانی در تحلیل الگوریتم‌هااست که در آن زمان اجرای الگوریتم با سرعت بسیار زیادی

افزایش می‌یابد این پیچیدگی در الگوریتم‌هایی دیده می‌شود که نیاز به بررسی تمام ترتیب‌های ممکن یا حالت‌

های ممکن دارند این پیچیدگی زمانی زمانی اتفاق می‌افتد که یک الگوریتم نیاز داشته باشد تمام ترتیب‌های

عنصر را محاسبه کند یا تمام حالت‌های ممکن را بررسی کند به دلیل افزایش نمایی تعداد ترتیب‌ها n ممکن از

زمان اجرای الگوریتم بسیار زیاد می‌شوداین پیچیدگی معمولاً در مسائل مربوط به تولید تمام n بابزرگ‌تر شدن 

حالات ممکن یا مسائل ترکیبیاتی مشاهده می‌شود. در جاوا اسکریپت، می‌توان بااستفاده از توابع بازگشتی یا

این مسائل را حل کرد lodash کتابخانه‌هایی مانند

*/ //==========================================================================================================================================================

// مثال 1 ) تولید تمام ترتیب‌های ممکن

// لازم است O(n!) الگوریتمی با پیچیدگی n برای تولید تمام ترتیب‌های ممکن یک آرایه از طول

function generatePermutations(arr) {
  const results = [];

  function permute(current, remaining) {
    if (remaining.length === 0) {
      results.push(current);
      return;
    }

    for (let i = 0; i < remaining.length; i++) {
      const newCurrent = current.concat(remaining[i]);
      const newRemaining = remaining.slice(0, i).concat(remaining.slice(i + 1));
      permute(newCurrent, newRemaining);
    }
  }

  permute([], arr);
  return results;
}

// مثال
const input = [1, 2, 3];
const permutations = generatePermutations(input);
console.log(permutations);

// خروجی :
// [
//   [1, 2, 3],
//   [1, 3, 2],
//   [2, 1, 3],
//   [2, 3, 1],
//   [3, 1, 2],
//   [3, 2, 1],
// ];
