/*
=============================================================================================================================================================
=============================================================================================================================================================

Stack  ساختمان داده  (پشته) 

عمل می‌کند. یعنی آخرین عنصری که به پشته اضافه می‌شود، اولین عنصری خواهد  LIFO Last In First Out پشته یک ساختار داده است که به صورت

بود که از آن خارج می‌شود به عبارت دیگر این ساختار مشابه یک پشته از کتاب‌ها است که فقط از بالای آن می‌توان کتاب‌ها را برداشته یا به آن اضافه کرد

Array LinkList برای پیاده سازی این ساختمان داده میتونیم از ساختمان داده های رو به رو استفاده بکنیم

عملیات اصلی در پشته ==============================================================================================================================================

Push: اضافه کردن یک عنصر به بالای پشته

Pop: برداشتن آخرین عنصر از پشته

Peek یا Top: مشاهده آخرین عنصر بدون حذف آن

IsEmpty: بررسی اینکه آیا پشته خالی است یا خیر

Size: تعداد عناصر موجود در پشته

پیچیدگی زمانی ===================================================================================================================================================

Push: O(1)

Pop: O(1)

Peek: O(1)

IsEmpty: O(1)

Size: O(1)

=============================================================================================================================================================
=============================================================================================================================================================

با استفاده از ساختمان داده آرایه ها Stack پیاده سازی 

*/

class Stack {
  constructor() {
    this.items = [];
  }

  push(element) {
    this.items.push(element);
  }

  pop() {
    return this.items.pop();
  }

  peek() {
    return this.items[this.items.length - 1];
  }

  isEmpty() {
    return this.items.length === 0;
  }

  size() {
    return this.items.length;
  }
}

const stack = new Stack();
stack.push(10);
stack.push(20);
stack.push(30);
console.log(stack.peek()); // 30
console.log(stack.pop()); // 30
console.log(stack.size()); // 2

// =============================================================================================================================================================

// برای پیاده‌سازی استک یا پشته با استفاده از ساختمان داده لینک لیست، می‌توانیم از یک لینک لیست ساده برای ذخیره عناصر پشته

//  به ترتیب با استفاده از لینک لیست انجام می‌شود. pop  و push استفاده کنیم. در این پیاده‌سازی، عملیات اصلی پشته مانند

// کلاس Node برای نمایندگی گره‌های لینک لیست

class Node {
  constructor(value) {
    this.value = value; // مقدار گره
    this.next = null; // اشاره‌گر به گره بعدی
  }
}

// کلاس Stack که از لینک لیست برای پیاده‌سازی استفاده می‌کند
class Stack {
  constructor() {
    this.top = null; // بالای پشته (اولین گره)
    this.size = 0; // اندازه پشته
  }

  // عملیات push برای اضافه کردن عنصر به پشته
  push(value) {
    const newNode = new Node(value); // گره جدید با مقدار داده شده
    newNode.next = this.top; // اشاره‌گر گره جدید به گره فعلی بالای پشته
    this.top = newNode; // گره جدید به عنوان بالای پشته قرار می‌گیرد
    this.size++; // افزایش اندازه پشته
  }

  // عملیات pop برای برداشتن آخرین عنصر از پشته
  pop() {
    if (this.isEmpty()) return null; // اگر پشته خالی است، چیزی نمی‌برد
    const poppedNode = this.top; // گره‌ای که باید از پشته برداشته شود
    this.top = this.top.next; // بالای پشته به گره بعدی تغییر می‌کند
    this.size--; // کاهش اندازه پشته
    return poppedNode.value; // بازگشت مقدار گره برداشته شده
  }

  // مشاهده آخرین عنصر بدون برداشتن آن
  peek() {
    if (this.isEmpty()) return null;
    return this.top.value;
  }

  // بررسی اینکه آیا پشته خالی است یا خیر
  isEmpty() {
    return this.size === 0;
  }

  // گرفتن اندازه پشته
  getSize() {
    return this.size;
  }
}

// مثال استفاده از Stack
const stack_withLinkList = new Stack();
stack_withLinkList.push(10);
stack_withLinkList.push(20);
stack_withLinkList.push(30);
console.log(stack_withLinkList.peek()); // 30
console.log(stack_withLinkList.pop()); // 30
console.log(stack_withLinkList.getSize()); // 2
console.log(stack_withLinkList.peek()); // 20

// =============================================================================================================================================================
// =============================================================================================================================================================
