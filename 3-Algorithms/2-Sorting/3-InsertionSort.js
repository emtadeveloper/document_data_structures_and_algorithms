/*
=====================================================================================================================================================================
=====================================================================================================================================================================

Insertion Sort : یا مرتب‌سازی درج، یکی از ساده‌ترین روش‌های مرتب‌سازی است. این روش، عناصر آرایه را به‌صورت مرحله‌به‌مرحله بررسی می‌کند و هر عنصر را در جایگاه

مناسب خود در بخش مرتب‌شده قرار می‌دهد. این الگوریتم به‌خصوص برای آرایه‌های کوچک یا داده‌هایی که تقریباً مرتب هستند، مناسب است

=====================================================================================================================================================================

Insertion Sort مفهوم کلی  =================================================================================================================================================

فرض کنید یک سری کارت دارید و می‌خواهید آن‌ها را مرتب کنید

کارت اول را برداشته و به‌عنوان یک دسته مرتب‌شده در نظر می‌گیرید

کارت دوم را برداشته و در جایگاه درست آن در کنار کارت اول قرار می‌دهید

این فرآیند را برای تمام کارت‌ها تکرار می‌کنید تا همه کارت‌ها مرتب شوند


=====================================================================================================================================================================

Insertion Sort مراحل انجام  ================================================================================================================================================

1 - از عنصر دوم ایندکس 1 شروع کنید، زیرا عنصر اول به‌تنهایی مرتب است

2 - را با عناصر قبل از خود مقایسه کنید key عنصر فعلی به نام کلید یا 

3 - اگر عناصر قبلی بزرگ‌تر از کلید بودند، آن‌ها را یک خانه به سمت راست جابجا کنید

4-کلید را در جایگاه مناسب درج کنید

5- این فرآیند را برای تمام عناصر تکرار کنید

=====================================================================================================================================================================

پیچیدگی زمانی ==========================================================================================================================================================

Best Case حالت بهترین :

O(n) اگر آرایه از قبل مرتب باشد، در هر مرحله فقط یک مقایسه انجام می‌شود پیچیدگی زمانی

Worst Case حالت بدترین :

O(n²) اگر آرایه به‌صورت نزولی مرتب باشد، هر عنصر باید با تمام عناصر قبلی مقایسه و جابجا شود پیچیدگی زمانی

Average Case حالت متوسط :

است O(n²) در شرایط معمولی، زمان اجرای الگوریتم برابر با 

*/

function insertionSort(arr) {
  for (let i = 1; i < arr.length; i++) {
    let key = arr[i]; // عنصر فعلی برای درج
    let j = i - 1;

    // جابجا کردن عناصر بزرگ‌تر از key
    while (j >= 0 && arr[j] > key) {
      arr[j + 1] = arr[j];
      j--;
    }
    // درج عنصر در موقعیت مناسب
    arr[j + 1] = key;
  }
  return arr;
}

// مثال:

const numbers = [8, 4, 6, 2];
console.log(insertionSort(numbers)); // خروجی: [2, 4, 6, 8]

// =====================================================================================================================================================================
// =====================================================================================================================================================================
