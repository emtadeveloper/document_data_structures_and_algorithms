/*
======================================================================================================================================================================

Recursion تعریف بازگشت  ===================================================================================================================================================

بازگشت حالتی است که یک تابع خودش را فراخوانی می‌کند تا زمانی که به یک شرط توقف برسد این ابزار به خصوص در حل مسائل بازگشتی و ساختارهای سلسله‌مراتبی مثل درخت‌ها و گراف‌ها بسیار مفید است

=======================================================================================================================================================================

Recursion الگوریتم بازگشتی  ==================================================================================================================================================

یک ابزار پایه‌ای در علوم کامپیوتر است و در بسیاری از الگوریتم‌های معروف و مسائل مختلف استفاده می‌شود در ادامه دسته‌بندی و الگوریتم‌هایی که به طور گسترده از بازگشت استفاده می‌کنند آورده شده‌اند

منجر شود Stack Overflow  استفاده زیاد از پشته، که ممکن است به خطای 

پیچیدگی زمانی بالا در برخی موارد (مثلاً فیبوناچی ساده).

باشد Iterative یا تبدیل به رویکرد تکراری Memoization ممکن است نیاز به بهینه‌سازی با تکنیک‌هایی مثل 

=======================================================================================================================================================================

توابع بازگشتی Recursive  Function =============================================================================================================================================

توابع بازگشتی توابعی هستند که در تعریف خودشان خودشان را صدا می‌زنند. این فراخوانی تا زمانی ادامه می‌یابد که به یک حالت پایه (شرط پایان) برسند اگر این حالت    

می‌شود Stack Overflow پایه تعریف نشده باشد یا به درستی پیاده‌سازی نشود فراخوانی تابع به صورت بی‌پایان ادامه خواهد داشت و در نهایت برنامه دچار خطای پشته

*/ //===================================================================================================================================================================

// نکات مهم در نوشتن توابع بازگشتی  =============================================================================================================================================

// 1 - Base Case حالت پایه یا ابتدایی

// این حالتی است که در آن، تابع دیگر خودش را صدا نمی‌زند و به جای آن یک مقدار مشخص یا نتیجه را برمی‌گرداند

if (num === 1) {
  return 1;
}

// =====================================================================================================================================================================

// 2 -Recursive Steps گام‌های بازگشتی

// این گام‌ها باید به گونه‌ای تعریف شوند که تابع در هر فراخوانی به حالت پایه نزدیک‌تر شود.

return num + sum(num - 1);

// =====================================================================================================================================================================

// 3- کاربرد مناسب و خوانایی کد

// از توابع بازگشتی زمانی استفاده کنید که مسئله به طور طبیعی ساختاری بازگشتی دارد (مانند محاسبه فاکتوریل، فیبوناچی یا پیمایش ساختارهای درختی) و باعث خوانایی بیشتر کد می‌شود

// =====================================================================================================================================================================

// 4- اگر حالت پایه را مشخص نکنید یا شرط درستی برای پایان الگوریتم نگذارید، کد شما به صورت بی‌نهایت اجرا می‌شود

function infinite() {
  console.log("This will never stop!");
  infinite(); // فراخوانی بی‌نهایت
}

// =====================================================================================================================================================================

//  مثال  : یک تابع بنویس که از عدد 1 تا عددی که به عنوان ورودی میگیرد رو جمع کند و خروجی شو نشون بدهد

function sum(num) {
  if (num === 1) {
    return 1;
  } else {
    return num + sum(num - 1);
  }
}
console.log(sum(4)); //10

// =====================================================================================================================================================================

//  مثال  : یک تابع بنویس که توان یک عدد رو حسال کند

function pow(num, arg) {
  if (arg == 1) {
    return num;
  } else {
    return num * pow(num, arg - 1);
  }
}
console.log(pow(3, 2)); //  9

// =====================================================================================================================================================================

//  مثال تابع فاکتوریل رو با استفاده از توابع بازگشتی برام بنویس

function factorial(n) {
  if (n === 0) {
    return 1; // شرط توقف
  }
  return n * factorial(n - 1); // فراخوانی بازگشتی
}

console.log(factorial(5)); // خروجی: 120

// O(2^n) این روش دارای پیچیدگی زمانی

function fibonacciMemo() {
  const cache = {}; // کش برای ذخیره نتایج
  function fib(n) {
    if (n in cache) return cache[n]; // اگر نتیجه در کش باشد
    if (n <= 1) return n;
    cache[n] = fib(n - 1) + fib(n - 2); // ذخیره نتیجه در کش
    return cache[n];
  }
  return fib;
}

const fibonacci = fibonacciMemo();
console.log(fibonacci(10)); // خروجی: 55

//  کاهش می‌دهد O(n) این روش پیچیدگی زمانی را به

// =====================================================================================================================================================================
// =====================================================================================================================================================================
