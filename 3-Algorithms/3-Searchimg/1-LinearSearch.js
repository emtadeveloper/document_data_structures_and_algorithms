/*
=====================================================================================================================================================================
=====================================================================================================================================================================

Linear Search  (جستجوی خطی) : یکی از ساده‌ترین و پایه‌ای‌ترین روش‌های جستجو در آرایه‌ها است. این الگوریتم به‌طور خطی تک‌تک عناصر آرایه را بررسی می‌کند تا زمانی که به عنصر مورد 

نظر برسد یا کل آرایه را بررسی کند

Linear Search مفهوم  =====================================================================================================================================================

در الگوریتم جستجوی خطی، ما یک آرایه را از ابتدا تا انتها بررسی می‌کنیم. برای هر عنصر از آرایه، بررسی می‌کنیم که آیا همانند عنصر مورد نظر است یا 

خیر اگر پیدا کردیم، ایندکس آن را  برمی‌گردانیم و اگر تمام آرایه بررسی شد و چیزی پیدا نشد، به کاربر اطلاع می‌دهیم که عنصر مورد نظر در آرایه نیست

در جاوااسکریپت Linear Search  پیاده‌سازی  ======================================================================================================================================

در زیر یک پیاده‌سازی ساده از این الگوریتم آورده شده است

*/

function linearSearch(arr, target) {
  // Loop through the array to check each element
  for (let i = 0; i < arr.length; i++) {
    // If the target element is found, return its index
    if (arr[i] === target) {
      return i;
    }
  }
  // If the target element is not found, return -1
  return -1;
}

const numbers = [10, 20, 30, 40, 50];
const targetValue = 30;

const result = linearSearch(numbers, targetValue);
if (result !== -1) {
  console.log(`Element found at index ${result}`);
} else {
  console.log("Element not found");
}

/*

تابع linearSearch(arr, target): این تابع دو پارامتر دریافت می‌کند

arr: آرایه‌ای که می‌خواهیم در آن جستجو کنیم

target: عنصری که به دنبال آن هستیم

استفاده می‌کنیم تا تک تک عناصر آرایه را بررسی کنیم اگر عنصر پیدا شد ایندکس آن را برمی‌گردانیم for در داخل تابع از یک حلقه 

برابر نبودند، مقدار -1 برمی‌گردانیم.target اگر تمام عناصر آرایه را بررسی کردیم و هیچ‌کدام با

=====================================================================================================================================================================

پیچیدگی زمانی =========================================================================================================================================================

=====================================================================================================================================================================

پیچیدگی زمانی (Time Complexity):تعداد عناصر آرایه است n است، که در آن O(n) در بدترین حالت، باید تمام عناصر آرایه را بررسی کنیم. بنابراین، پیچیدگی زمانی این الگوریتم 

پیچیدگی فضایی (Space Complexity): است O(1)  این الگوریتم از فضای اضافی استفاده نمی‌کند (غیر از متغیرهای داخلی)، بنابراین پیچیدگی فضایی آن 

=====================================================================================================================================================================
=====================================================================================================================================================================
*/
